{"ast":null,"code":"import * as actions from '../types/questionTypes';\nimport axios from 'axios';\nimport { url } from '../../config';\nexport const getQuestions = () => (dispatch, getState) => {\n  dispatch({\n    type: actions.GET_QUESTIONS_REQUEST\n  }); // checking if the questions existed in the localstorage\n\n  if (localStorage.getItem('questions')) {\n    dispatch({\n      type: actions.GET_QUESTIONS_SUCCESS,\n      payload: JSON.parse(localStorage.getItem('questions'))\n    });\n    console.log('heeeey');\n  } else {\n    axios.get(`${url}?amount=10&difficulty=hard&type=boolean`).then(result => {\n      localStorage.setItem('questions', JSON.stringify(result.data.results));\n      dispatch({\n        type: actions.GET_QUESTIONS_SUCCESS,\n        payload: result.data.results\n      });\n    }).catch(err => {\n      console.log(err);\n      dispatch({\n        type: actions.GET_QUESTIONS_FAIL,\n        payload: err.response.data\n      });\n    });\n  }\n};\nexport const addAnswer = answer => (dispatch, getState) => {\n  console.log('yehaaa');\n  dispatch({\n    type: actions.ADD_ANSWER_REQUEST\n  }); // checking if the questions existed in the localstorage\n\n  dispatch({\n    type: actions.ADD_ANSWER_SUCCESS,\n    payload: answer\n  });\n};","map":{"version":3,"names":["actions","axios","url","getQuestions","dispatch","getState","type","GET_QUESTIONS_REQUEST","localStorage","getItem","GET_QUESTIONS_SUCCESS","payload","JSON","parse","console","log","get","then","result","setItem","stringify","data","results","catch","err","GET_QUESTIONS_FAIL","response","addAnswer","answer","ADD_ANSWER_REQUEST","ADD_ANSWER_SUCCESS"],"sources":["/media/moataz/data/my-projects/react projects/trivia/src/store/actions/questionActions.js"],"sourcesContent":["import * as actions from '../types/questionTypes';\nimport axios from 'axios';\nimport {url} from '../../config';\n\n\n\n\n\nexport const getQuestions = () => (dispatch, getState) => {\n    dispatch({type: actions.GET_QUESTIONS_REQUEST});\n    // checking if the questions existed in the localstorage\n    if(localStorage.getItem('questions')){\n        dispatch({type: actions.GET_QUESTIONS_SUCCESS, payload: JSON.parse(localStorage.getItem('questions'))});\n       console.log('heeeey');\n    }\n    else {\n    axios.get(`${url}?amount=10&difficulty=hard&type=boolean`).\n    then(result => {\n        localStorage.setItem('questions', JSON.stringify(result.data.results));\n        dispatch({type: actions.GET_QUESTIONS_SUCCESS, payload: result.data.results});\n    })\n    .catch(err=> { console.log(err); dispatch({type: actions.GET_QUESTIONS_FAIL, payload: err.response.data})});\n    }\n};\n\n\nexport const addAnswer = (answer) => (dispatch, getState) => { console.log('yehaaa');\n    dispatch({type: actions.ADD_ANSWER_REQUEST});\n    // checking if the questions existed in the localstorage\n     dispatch({type: actions.ADD_ANSWER_SUCCESS, payload: answer});\n   \n    \n};\n"],"mappings":"AAAA,OAAO,KAAKA,OAAZ,MAAyB,wBAAzB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAAQC,GAAR,QAAkB,cAAlB;AAMA,OAAO,MAAMC,YAAY,GAAG,MAAM,CAACC,QAAD,EAAWC,QAAX,KAAwB;EACtDD,QAAQ,CAAC;IAACE,IAAI,EAAEN,OAAO,CAACO;EAAf,CAAD,CAAR,CADsD,CAEtD;;EACA,IAAGC,YAAY,CAACC,OAAb,CAAqB,WAArB,CAAH,EAAqC;IACjCL,QAAQ,CAAC;MAACE,IAAI,EAAEN,OAAO,CAACU,qBAAf;MAAsCC,OAAO,EAAEC,IAAI,CAACC,KAAL,CAAWL,YAAY,CAACC,OAAb,CAAqB,WAArB,CAAX;IAA/C,CAAD,CAAR;IACDK,OAAO,CAACC,GAAR,CAAY,QAAZ;EACF,CAHD,MAIK;IACLd,KAAK,CAACe,GAAN,CAAW,GAAEd,GAAI,yCAAjB,EACAe,IADA,CACKC,MAAM,IAAI;MACXV,YAAY,CAACW,OAAb,CAAqB,WAArB,EAAkCP,IAAI,CAACQ,SAAL,CAAeF,MAAM,CAACG,IAAP,CAAYC,OAA3B,CAAlC;MACAlB,QAAQ,CAAC;QAACE,IAAI,EAAEN,OAAO,CAACU,qBAAf;QAAsCC,OAAO,EAAEO,MAAM,CAACG,IAAP,CAAYC;MAA3D,CAAD,CAAR;IACH,CAJD,EAKCC,KALD,CAKOC,GAAG,IAAG;MAAEV,OAAO,CAACC,GAAR,CAAYS,GAAZ;MAAkBpB,QAAQ,CAAC;QAACE,IAAI,EAAEN,OAAO,CAACyB,kBAAf;QAAmCd,OAAO,EAAEa,GAAG,CAACE,QAAJ,CAAaL;MAAzD,CAAD,CAAR;IAAyE,CAL1G;EAMC;AACJ,CAfM;AAkBP,OAAO,MAAMM,SAAS,GAAIC,MAAD,IAAY,CAACxB,QAAD,EAAWC,QAAX,KAAwB;EAAES,OAAO,CAACC,GAAR,CAAY,QAAZ;EAC3DX,QAAQ,CAAC;IAACE,IAAI,EAAEN,OAAO,CAAC6B;EAAf,CAAD,CAAR,CADyD,CAEzD;;EACCzB,QAAQ,CAAC;IAACE,IAAI,EAAEN,OAAO,CAAC8B,kBAAf;IAAmCnB,OAAO,EAAEiB;EAA5C,CAAD,CAAR;AAGJ,CANM"},"metadata":{},"sourceType":"module"}